#!/usr/bin/env python3
"""Generate version data.  """


import gevent.monkey

gevent.monkey.patch_all()

# pylint:disable=using-constant-test
if True:
    import json
    import logging
    from pathlib import Path

    import gevent
    import requests
    from gevent.pool import Pool


def version_range(start: list, end: list):
    """Generator for version range. """

    current = list(start)
    while True:
        yield tuple(current)
        if current[2] < end[2]:
            current[2] += 1
        elif current[1] < end[1]:
            current[1] += 1
            current[2] = 1
        elif current[0] < end[0]:
            current[0] += 1
            current[1] = 0
            current[2] = 1
        else:
            return


def is_downloadable(major: int, minor: int, patch: int) -> bool:
    """Test whether is a downloadable nuke version.

    Args:
        major (int): Major version
        minor (int): Minor version
        patch (int): Patch version

    Returns:
        bool: Test result
    """

    version = f'{major}.{minor}v{patch}'
    url = ('https://thefoundry.s3.amazonaws.com/'
           f'products/nuke/releases/{version}/Nuke{version}-linux-x86-release-64.tgz')
    resp = requests.head(url)
    logging.getLogger(__name__).debug('testing download url: %s', version)

    return resp.status_code == 200


def load_versions():
    """load versions data from versions.json"""

    with (Path(__file__).parent.parent / "versions.json").open() as f:
        data = json.load(f)
    return [tuple(i) for i in data["versions"]]


def get_versions():
    """Get avaliable nuke versions.  """

    ret = set(load_versions())

    def add_if_downloadable(i):
        if i in ret or is_downloadable(*i):
            ret.add(i)
    pool = Pool(32)
    pool.map(add_if_downloadable, version_range([9, 0, 1], [13, 10, 10]))
    pool.join()

    return sorted(ret)


def main():
    data = {
        "$comment": "Code generated by ./scripts/update_versions.py, DO NOT EDIT.",
        "versions": [i for i in get_versions()],
    }
    with (Path(__file__).parent.parent / "versions.json").open("w") as f:
        json.dump(data, f)


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    main()
