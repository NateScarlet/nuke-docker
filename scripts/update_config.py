#!/usr/bin/env python
"""Generate circle ci config.  """

from pathlib import Path

from update_versions import load_versions

CONFIG_TEMPLATE = '''\
# Code generated by ./scripts/update_config.py, DO NOT EDIT.
version: 2.1
orbs:
  docker-publish: circleci/docker-publish@0.1.6
executors:
  docker: docker-publish/docker
commands:
  publish:
    parameters:
      major:
        type: integer
      minor:
        type: integer
      patch:
        type: integer
      extra_build_args:
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
        default: ''
    steps:
      - checkout
      - setup_remote_docker
      - docker-publish/check
      - docker-publish/build:
          extra_build_args: >-
            <<#parameters.extra_build_args>><<parameters.extra_build_args>><</parameters.extra_build_args>>
            --build-arg DEBIAN_MIRROR=
            --build-arg foundry_LICENSE=
            --build-arg PIP_INDEX_URL=
            --build-arg NUKE_MAJOR=<< parameters.major >>
            --build-arg NUKE_MINOR=<< parameters.minor >>
            --build-arg NUKE_PATCH=<< parameters.patch >>
          image: natescarlet/nuke
          tag: << parameters.major >>.<< parameters.minor >>v<< parameters.patch >>
      - docker-publish/deploy:
          image: natescarlet/nuke
'''


def generate_config():
    """Config generator.  """

    yield CONFIG_TEMPLATE
    yield '''\
jobs:
'''

    jobs = []
    for i in load_versions():
        jobname = f'publish-{i[0]}-{i[1]}-{i[2]}'
        jobs.append(jobname)
        yield f'''\
  {jobname}:
    executor: docker
    steps:
      - publish:
          major: {i[0]}
          minor: {i[1]}
          patch: {i[2]}
'''

    yield f'''\
          extra_build_args: --tag natescarlet/nuke:latest
'''

    yield '''\
workflows:
  version: 2
  build and publish:
    jobs:
'''

    for i in jobs:
        yield f'''\
      - {i}
'''


def main():
    config_file = (Path(__file__).parent.parent / '.circleci' / 'config.yml')
    with config_file.open('w', encoding='utf-8') as f:
        for i in generate_config():
            f.write(i)


if __name__ == '__main__':
    main()
